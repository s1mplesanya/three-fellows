import telebot
from telebot import types
import config

import psycopg2
import os

import schedule
import time
import threading

# from asyncscheduler import AsyncScheduler

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Control+Z –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")

bot = telebot.TeleBot(config.token)


class User:
        def __init__(self, username, userStatus,userPurposes):
                self.username = username
                self.userStatus = userStatus
                self.userPurposes = userPurposes

class Purpose:
        def __init__(self, purpose, progress, today):
                self.purpose = purpose
                self.progress = progress      
                self.today = today 

user_data = {}          
user_spam = {} 
msgStart = "*–ï—Å—Ç—å —Ç–∞–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ ‚Äì ¬´—Ç—Ä–æ–π–Ω–æ–π –º–æ–ª–æ–¥–µ—Ü¬ª. –ö–∞–∫ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n\n*–ù–∞–ø—Ä–∏–º–µ—Ä, —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —á–∏—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏–ª–∏ –±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–¥–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É, –Ω–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É—Å–∏–ª–∏–π. –ù–∞–≤–µ—Ä–Ω–æ–µ —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ–±—ã –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫—É—é-—Ç–æ –ø—Ä–∏–≤—ã—á–∫—É, –Ω—É–∂–µ–Ω 21 –¥–µ–Ω—å. –¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å ‚Äì –æ—Ç–º–µ—á–∞–µ—à—å –≤ –±–æ—Ç–µ –∏ –ø–æ–ª—É—á–∞–µ—à—å –±—É–∫–≤—É –ú, –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å ‚Äì –±—É–∫–≤—É –û, –∏ —Ç–∞–∫ —Å–µ–º—å –¥–Ω–µ–π, –ø–æ–∫–∞ –Ω–µ —Å–æ–±–µ—Ä–µ—Ç—Å—è —Å–ª–æ–≤–æ ¬´–ú–û–õ–û–î–ï–¶¬ª.\n\n*–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–µ–≥–æ –∑–∞–≤–µ—Ç–Ω–æ–≥–æ ¬´—Ç—Ä–æ–π–Ω–æ–≥–æ –º–æ–ª–æ–¥—Ü–∞¬ª –ø–æ–≤—Ç–æ—Ä–∏ —Å–ª–æ–≤–æ ¬´–º–æ–ª–æ–¥–µ—Ü¬ª 3 —Ä–∞–∑–∞ –∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ç–≤–æ–µ–π —Ü–µ–ª–∏ üéØ*\n"

msgRegister = "*–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ*, –∫–∞–∫—É—é –ø–∞–≥—É–±–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å,\n–∏–ª–∏ –∫–∞–∫—É—é —Ö–æ—Ä–æ—à—É—é –ø—Ä–∏–≤—ã—á–∫—É –í—ã *—Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å*: \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: _–•–æ—á—É –Ω–∞—á–∞—Ç—å —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å_\n–ò–ª–∏: _–•–æ—á—É –±—Ä–æ—Å–∏—Ç—å –ø–∏—Ç—å!_"

msgCancel = "üòü *–í–æ—Ç —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ —Å–¥–∞—à—å—Å—è?*\n–£ —Ç–µ–±—è –µ—Å—Ç—å –µ—â–µ –≤—Ä–µ–º—è –¥–æ *00:00*, –∏ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –±—É–¥–µ—Ç –æ–±–Ω—É–ª—ë–Ω –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å!\n"

# –ö–æ–º–∞–Ω–¥–∞ start
@bot.message_handler(commands=["start"])
def start(message):
        # print(threading.current_thread())
        if message.from_user.id in user_data:
                msg = showMainMenu(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ')
                bot.register_next_step_handler(msg, mainMenu) 
        else:
                bot.send_message(message.chat.id, msgStart, reply_markup=types.ReplyKeyboardRemove(), parse_mode="Markdown")
                
                msg = bot.send_message(message.chat.id, msgRegister, reply_markup=types.ReplyKeyboardRemove(), parse_mode="Markdown")
                bot.register_next_step_handler(msg, inputPurpose)

@bot.message_handler(commands=["notify"])
def changeWeek(message):
        if message.from_user.id == 654953623:
                string = "*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: üì©*"
                msg = bot.send_message(message.chat.id, string, parse_mode="Markdown")
                bot.register_next_step_handler(msg, notify_menu)

        else: 
                string = "*–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ üôÅ*"
                msg = showMainMenu(message.chat.id, string)
                bot.register_next_step_handler(msg, mainMenu)  

def notify_menu(message):
        
        for k,v in user_data.items():
                if v.userStatus != -1: 
                        try: 
                                bot.send_message(k, message.text, parse_mode="Markdown")
                        except Exception as e:
                                print(e)


        msg = showMainMenu(message.chat.id, "*–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üì¨!*")
        bot.register_next_step_handler(msg, mainMenu)


def showProgress(user_id):

        purp = user_data[user_id].userPurposes
        string = "–í–∞—à–∞ —Ü–µ–ª—å: *" + purp.purpose + "*\n"

        string += "–°–µ–≥–æ–¥–Ω—è: "

        if purp.today == 1:
                string += "*–í—ã–ø–æ–ª–Ω–µ–Ω–æ* ‚úÖ"
        else:
                string += "*–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ* ‚ùå"

        string += "\n_–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –≤ 00 —á–∞—Å–æ–≤ 00 –º–∏–Ω—É—Ç._"
        bot.send_message(user_id, string, reply_markup=types.ReplyKeyboardRemove(), parse_mode="Markdown")



        string = "–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: "
        if purp.progress == 0:
                string += "*—Ç—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–ª –±—É–∫–≤, –Ω–µ —Å–¥–∞–≤–∞–π—Å—è, –≤—Å–µ –≤–ø–µ—Ä–µ–¥–∏!* üòä"
        else:
                string += "*"

                Fellow = '–ú–û–õ–û–î–ï–¶'

                if purp.progress > 7:
                        string += (Fellow + ' ') * (purp.progress // 7) # round(v.userPurposes.progress / 7) math.floor(purp.progress / 7 *10)/10
                        string += Fellow[:(purp.progress % 7)]
                        if purp.progress > 21:
                                bot.send_message(user_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!! –í—ã –¥–æ—à–ª–∏ –¥–æ *3 –ú–û–õ–û–î–¶–û–í*!', parse_mode="Markdown")
                else: 
                        string += Fellow[:purp.progress]
                string += "*"
        string += "\n"

        return bot.send_message(user_id, string, parse_mode="Markdown")

def showMainMenu(user_id, message):

        mainMenu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        purp = user_data[user_id].userPurposes

        if purp.today == 1:
                mainMenu.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå"))
        else:
                mainMenu.add(types.KeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è ‚úÖ"))

        mainMenu.add(types.KeyboardButton("–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å üìà"))
        mainMenu.add(types.KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"))
        return bot.send_message(user_id, message, reply_markup=mainMenu, parse_mode="Markdown")
 
def showCancelMenu(user_id, message):
        
        cMenu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        cMenu.row(types.KeyboardButton("–•–æ—á—É –∑–∞–∫–æ–Ω—á–∏—Ç—å üôÅ"), types.KeyboardButton("–•–æ—á—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É —Ü–µ–ª—å üòÉ"), types.KeyboardButton("–•–æ—á—É –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é üòÉ"))
        return bot.send_message(user_id, message, reply_markup=cMenu, parse_mode="Markdown")

def getUsers():

        conn = psycopg2.connect(dbname=config.DATABASE, user=config.USER, 
                        password=config.PASSWORD, host=config.HOST)
        cursor = conn.cursor()
        
        try:
                cursor.execute("SELECT * FROM users")
                users = cursor.fetchall()

                for user in users:
                        user_data[user[1]] = User(user[2], user[3], [])
                print("Database users sucesessful loaded -> ")
                print(users)
        except Exception as e:
                print(e)
                print("–°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")

        cursor.close()
        conn.close()

def getFellows():

        conn = psycopg2.connect(dbname=config.DATABASE, user=config.USER, 
                password=config.PASSWORD, host=config.HOST)
        cursor = conn.cursor()
        try:
                cursor.execute("SELECT * FROM fellows")
                fellows = cursor.fetchall()

                for fellow in fellows:
                        user_data[fellow[1]].userPurposes = Purpose(fellow[2], fellow[3], fellow[4])
                        # user_data[user[1]] = User(user[2], [])

                print("Database fellows sucesessful loaded -> ")
                print(fellows)
        except Exception as e:
                print(e)
                print("–°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                
        cursor.close()
        conn.close()

def updateUser(user_id):
        
        conn = psycopg2.connect(dbname=config.DATABASE, user=config.USER, 
                        password=config.PASSWORD, host=config.HOST)
        cursor = conn.cursor()

        try:
                purp = user_data[user_id].userPurposes
                
                sql = "UPDATE fellows SET progress= %s,today= %s WHERE user_id= %s"
                val = (purp.progress, purp.today, user_id)
                cursor.execute(sql, val)
                conn.commit()
                print("–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å!")

                sql = "UPDATE users SET status= %s WHERE user_id= %s"
                val = (user_data[user_id].userStatus, user_id)
                cursor.execute(sql, val)
                conn.commit()
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è!")

        except Exception as e:
                print(e)
                print("–°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        cursor.close()
        conn.close()

def updatePurposes():

        for k,v in user_data.items():

                if v.userStatus == -1: 
                        continue

                if v.userPurposes.today == 0:
                        v.userPurposes.progress = 0
                        v.userStatus += 1
                        updateUser(k)
                        bot.send_message(k, "–í—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ, –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω—É–ª–∏–ª—Å—è (", parse_mode="Markdown")

                        if v.userStatus >= 2:
                                msg = showCancelMenu(k, f"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É–∂–µ {v.userStatus} –ø–æ–¥—Ä—è–¥ üòî")
                                bot.register_next_step_handler(msg, cancelMenu) 
                                return 1
                        msg = showMainMenu(k, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                        bot.register_next_step_handler(msg, mainMenu) 
                else:
                        v.userPurposes.progress += 1
                        v.userPurposes.today = 0
                        v.userStatus = 0
                        updateUser(k)
                        string = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±—É–∫–≤—ã!!!\n –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: "
                        string += "*"

                        Fellow = '–ú–û–õ–û–î–ï–¶'
                        if v.userPurposes.progress > 7:
                                string += (Fellow + ' ') * (v.userPurposes.progress // 7)
                                string += Fellow[:(v.userPurposes.progress % 7)]
                                if v.userPurposes.progress == 21:
                                        bot.send_message(k, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!! –í—ã –¥–æ—à–ª–∏ –¥–æ *3 –ú–û–õ–û–î–¶–û–í*!', parse_mode="Markdown")
                        else: 
                                string += Fellow[:v.userPurposes.progress]

                        string += "*"
                        msg = showMainMenu(k, string)
                        bot.register_next_step_handler(msg, mainMenu)    

                        
def inputPurpose(message):
        try:
                if message.text == '' or message.from_user.username == '':
                        print("error username")
                        msg = bot.send_message(message.chat.id, msgRegister, reply_markup=types.ReplyKeyboardRemove(), parse_mode="Markdown")
                        bot.register_next_step_handler(msg, inputPurpose)
                        return 1

                user_data[message.from_user.id] = User(message.from_user.username, 1, Purpose(message.text, 0, 0))

                conn = psycopg2.connect(dbname=config.DATABASE, user=config.USER, 
                        password=config.PASSWORD, host=config.HOST)
                cursor = conn.cursor()

                sql = "INSERT INTO users (user_id, username, status) VALUES (%s, %s, %s)"
                val = (message.from_user.id, message.from_user.username, 1)
                cursor.execute(sql, val)
                conn.commit()

                sql = "INSERT INTO fellows (user_id, fellow, progress, today) VALUES (%s, %s, %s, %s)"
                val = (message.from_user.id, message.text, 0, 0)
                cursor.execute(sql, val)
                conn.commit()

                print(message.from_user.first_name, " –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.")

                string = "–û—Ç–ª–∏—á–Ω–æ üòâ\n–í–∞—à–∞ —Ü–µ–ª—å: " + message.text.strip()
                msg = showMainMenu(message.from_user.id, string)
                bot.register_next_step_handler(msg, mainMenu)

                cursor.close()
                conn.close()
                # print(message.text.strip())

        except Exception as e:
                print(e)

def inputPurpose1(message):
        try:

                user_data[message.from_user.id] = User(message.from_user.username, 1, Purpose(message.text, 0, 0))
                
                conn = psycopg2.connect(dbname=config.DATABASE, user=config.USER, 
                        password=config.PASSWORD, host=config.HOST)
                cursor = conn.cursor()
                

                sql = "UPDATE fellows SET fellow=%s, progress=%s, today=%s WHERE user_id=%s"
                val = (message.text, 0, 0, message.from_user.id)
                cursor.execute(sql, val)
                conn.commit()

                print(message.from_user.first_name, " —Å–Ω–æ–≤–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.")

                string = "–û—Ç–ª–∏—á–Ω–æ üòâ\n–í–∞—à–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å: " + message.text.strip()
                msg = showMainMenu(message.from_user.id, string)
                bot.register_next_step_handler(msg, mainMenu)

        except Exception as e:
                print(e)


def cancelMenu(message):
        if message.text.strip().split()[1] == "–∑–∞–∫–æ–Ω—á–∏—Ç—å":
                bot.send_message(message.chat.id, "–ñ–∞–ª—å, —á—Ç–æ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—à—å :(\n–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start", parse_mode="Markdown")
                user_data[message.from_user.id].userStatus = -1
                updateUser(message.from_user.id)

        elif message.text.strip().split()[1] == "–≤—ã–ø–æ–ª–Ω–∏—Ç—å":
                bot.send_message(message.chat.id, "–¢—ã —Å–¥–µ–ª–∞–ª *–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π* –≤—ã–±–æ—Ä üòâ! –ü—Ä–æ–¥–æ–ª–∂–∞–π üëâ /start", parse_mode="Markdown")
                

        elif message.text.strip().split()[1] == "–Ω–∞—á–∞—Ç—å":
                msg = bot.send_message(message.chat.id, msgRegister, reply_markup=types.ReplyKeyboardRemove(), parse_mode="Markdown")
                bot.register_next_step_handler(msg, inputPurpose1)


def mainMenu(message):

        if message.from_user.id in user_spam and time.time() - user_spam[message.from_user.id] < 1.5:
                bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å —Å–ø–∞–º–∏—Ç—å –±–æ—Ç–∞ )", parse_mode="Markdown")
                return 1
        user_spam[message.from_user.id] = time.time()
        # print(threading.current_thread())
        if message.text.strip().split()[0] == "–û—Ç–º–µ—Ç–∏—Ç—å":
                purp = user_data[message.from_user.id].userPurposes
                purp.today = 1
                user_data[message.from_user.id].userStatus = 0
                updateUser(message.from_user.id)

                string = '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –º–æ–ª–æ–¥–µ—Ü! üòä'
                msg = showMainMenu(message.from_user.id, string)
                bot.register_next_step_handler(msg, mainMenu)

        elif message.text.strip().split()[0] == "–û—Ç–º–µ–Ω–∏—Ç—å":
                purp = user_data[message.from_user.id].userPurposes
                purp.today = 0
                updateUser(message.from_user.id)

                msg = showMainMenu(message.from_user.id, msgCancel)
                bot.register_next_step_handler(msg, mainMenu)

        elif message.text.strip().split()[0] == "–ú–æ–π":
                msg = showProgress(message.from_user.id)
                bot.register_next_step_handler(msg, mainMenu)


        elif message.text.strip().split()[0] == "–ü—Ä–∞–≤–∏–ª–∞":
                msg = bot.send_message(message.chat.id, msgStart, parse_mode="Markdown")
                bot.register_next_step_handler(msg, mainMenu)
        
        # else:
        #         msg = showMainMenu(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:')


@bot.message_handler(content_types=["text"])
def handle_text(message):
        if message.from_user.id in user_data:

                if message.text.strip().split()[0] == "–û—Ç–º–µ—Ç–∏—Ç—å":
                        purp = user_data[message.from_user.id].userPurposes
                        purp.today = 1
                        updateUser(message.from_user.id)

                        string = '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –º–æ–ª–æ–¥–µ—Ü! üòä'
                        msg = showMainMenu(message.from_user.id, string)
                        bot.register_next_step_handler(msg, mainMenu)

                elif message.text.strip().split()[0] == "–û—Ç–º–µ–Ω–∏—Ç—å":
                        purp = user_data[message.from_user.id].userPurposes
                        purp.today = 0
                        updateUser(message.from_user.id)

                        # string = '–ñ–∞–ª—å –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å —Å–ª–æ–≤–æ –∑–∞–Ω–æ–≤–æ üòÖ'
                        msg = showMainMenu(message.from_user.id, msgCancel)
                        bot.register_next_step_handler(msg, mainMenu)

                elif message.text.strip().split()[0] == "–ú–æ–π":
                        msg = showProgress(message.from_user.id)
                        bot.register_next_step_handler(msg, mainMenu)


                elif message.text.strip().split()[0] == "–ü—Ä–∞–≤–∏–ª–∞":
                        msg = bot.send_message(message.chat.id, msgStart, parse_mode="Markdown")
                        bot.register_next_step_handler(msg, mainMenu)

        else: bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start', parse_mode="Markdown")
        print(threading.current_thread())

    
bot.enable_save_next_step_handlers(delay=3)

bot.load_next_step_handlers()

def main():
        getUsers()
        getFellows()

        schedule.every().day.at("00:00").do(updatePurposes)

        thr1 = threading.Thread(target=myfunc)
        thr1.start()

def myfunc():
        while True:
                schedule.run_pending()
                time.sleep(30)       

if __name__== '__main__':

        main()
        bot.polling(none_stop=True) # , interval=0
